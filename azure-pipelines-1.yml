trigger:
  - main

variables:
  - name: resourceGroupName
    value: 'rg-vnet-nsg-example'
  - name: location
    value: 'eastus'
  - name: vnetName
    value: 'myVNet'
  - name: nsgName
    value: 'myNSG'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzureCLI@2
  displayName: 'Create Resource Group'
  inputs:
    azureSubscription: 'terraform-demo'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create --name $(resourceGroupName) --location $(location)

- task: AzureCLI@2
  displayName: 'Deploy Network Security Group'
  inputs:
    azureSubscription: 'terraform-demo'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Check if the Bicep file exists
      if [ ! -f "$(Build.SourcesDirectory)/avm/res/network/network-security-group/main.bicep" ]; then
        echo "Error: NSG Bicep file not found"
        exit 1
      fi

      # Deploy NSG with error handling
      az deployment group create \
        --resource-group $(resourceGroupName) \
        --template-file $(Build.SourcesDirectory)/avm/res/network/network-security-group/main.bicep \
        --parameters name=$(nsgName) \
        --parameters securityRules='[{"name":"AllowHTTPSInbound","properties":{"protocol":"Tcp","sourcePortRange":"*","destinationPortRange":"443","sourceAddressPrefix":"*","destinationAddressPrefix":"*","access":"Allow","priority":100,"direction":"Inbound"}}]' \
        --debug

      # Check deployment status
      if [ $? -ne 0 ]; then
        echo "Error: NSG deployment failed"
        exit 1
      fi

- task: AzureCLI@2
  displayName: 'Deploy Virtual Network'
  inputs:
    azureSubscription: 'terraform-demo'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Check if the Bicep file exists
      if [ ! -f "$(Build.SourcesDirectory)/avm/res/network/virtual-network/main.bicep" ]; then
        echo "Error: VNet Bicep file not found"
        exit 1
      fi

      # Define parameters as a JSON string
      params=$(cat <<EOF
      {
        "name": {"value": "$(vnetName)"},
        "addressPrefixes": {"value": ["10.0.0.0/25"]},
        "subnets": {
          "value": [
            {
              "name": "dmz-subnet",
              "addressPrefix": "10.0.0.0/27"
            },
            {
              "name": "app-subnet",
              "addressPrefix": "10.0.0.32/27"
            },
            {
              "name": "data-subnet",
              "addressPrefix": "10.0.0.64/27"
            }
          ]
        }
      })

      # Deploy VNet with error handling
      az deployment group create \
        --resource-group $(resourceGroupName) \
        --template-file $(Build.SourcesDirectory)/avm/res/network/virtual-network/main.bicep \
        --parameters "$params" \
        --debug

      # Check deployment status
      if [ $? -ne 0 ]; then
        echo "Error: VNet deployment failed"
        exit 1
      fi

- task: AzureCLI@2
  displayName: 'Associate NSG with Subnets'
  inputs:
    azureSubscription: 'terraform-demo'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Get the NSG resource ID
      nsgId=$(az network nsg show --resource-group $(resourceGroupName) --name $(nsgName) --query id -o tsv)
      
      # Associate NSG with dmz-subnet and app-subnet
      az network vnet subnet update \
        --resource-group $(resourceGroupName) \
        --vnet-name $(vnetName) \
        --name dmz-subnet \
        --network-security-group $nsgId

      az network vnet subnet update \
        --resource-group $(resourceGroupName) \
        --vnet-name $(vnetName) \
        --name app-subnet \
        --network-security-group $nsgId

      # Note: We're not associating the NSG with data-subnet in this example