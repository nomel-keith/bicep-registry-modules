trigger:
  - main

variables:
  environments: 'dev,qa,uat,prod'

pool:
  vmImage: 'ubuntu-latest'

stages:
- ${{ each env in split(variables.environments, ',') }}:
  - stage: Infrastructure_${{ env }}
    condition: |
      and(
        succeeded(),
        or(
          eq('${{ env }}', 'dev'),
          and(eq('${{ env }}', 'qa'), succeeded('Infrastructure_dev')),
          and(eq('${{ env }}', 'uat'), succeeded('Infrastructure_qa')),
          and(eq('${{ env }}', 'prod'), succeeded('Infrastructure_uat'))
        )
      )
    jobs:
    - job: DeployInfrastructure
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        displayName: 'Create Resource Group'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            resourceGroupName=$(jq -r '.parameters.resourceGroupName.value' "$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json")
            location=$(jq -r '.parameters.location.value' "$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json")
            az group create --name "$resourceGroupName" --location "$location"

      - task: AzureCLI@2
        displayName: 'Deploy Network Security Group'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            set -e  # Exit immediately if a command exits with a non-zero status
            set -x  # Print commands and their arguments as they are executed

            echo "Starting NSG deployment script"

            # Extract parameters
            paramFile="$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json"
            echo "Parameter file path: $paramFile"

            if [ ! -f "$paramFile" ]; then
              echo "Error: Parameter file not found: $paramFile"
              exit 1
            fi

            echo "Parameter file contents:"
            cat "$paramFile"

            resourceGroupName=$(jq -r '.parameters.resourceGroupName.value' "$paramFile")
            location=$(jq -r '.parameters.location.value' "$paramFile")
            nsgName=$(jq -r '.parameters.nsgName.value' "$paramFile")

            echo "Extracted parameters:"
            echo "Resource Group: $resourceGroupName"
            echo "Location: $location"
            echo "NSG Name: $nsgName"

            # Check if resource group exists
            echo "Checking if resource group exists"
            if ! az group show --name "$resourceGroupName" &>/dev/null; then
              echo "Creating resource group $resourceGroupName"
              az group create --name "$resourceGroupName" --location "$location"
            else
              echo "Resource group $resourceGroupName already exists"
            fi

            # Deploy NSG
            echo "Deploying Network Security Group"
            bicepFile="$(Build.SourcesDirectory)/avm/res/network/network-security-group/main.bicep"
            echo "Bicep file path: $bicepFile"

            if [ ! -f "$bicepFile" ]; then
              echo "Error: Bicep file not found: $bicepFile"
              exit 1
            fi

            echo "Bicep file contents:"
            cat "$bicepFile"

            az deployment group create \
              --resource-group "$resourceGroupName" \
              --template-file "$bicepFile" \
              --parameters name="$nsgName" \
              --debug

            if [ $? -eq 0 ]; then
              echo "NSG deployment successful"
            else
              echo "NSG deployment failed"
              exit 1
            fi

            echo "NSG deployment script completed"

      - task: AzureCLI@2
        displayName: 'Deploy Virtual Network'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            set -e  # Exit immediately if a command exits with a non-zero status

            echo "Starting Virtual Network deployment script"

            # Extract parameters
            paramFile="$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json"
            echo "Parameter file path: $paramFile"

            if [ ! -f "$paramFile" ]; then
              echo "Error: Parameter file not found: $paramFile"
              exit 1
            fi

            echo "Parameter file contents:"
            cat "$paramFile"

            resourceGroupName=$(jq -r '.parameters.resourceGroupName.value' "$paramFile")
            location=$(jq -r '.parameters.location.value' "$paramFile")
            vNetName=$(jq -r '.parameters.vNetName.value' "$paramFile")

            # Handle addressPrefixes as either string or array
            addressPrefixes=$(jq -r '.parameters.addressPrefixes.value | if type=="array" then join(" ") else . end' "$paramFile")

            echo "Extracted parameters:"
            echo "Resource Group: $resourceGroupName"
            echo "Location: $location"
            echo "VNet Name: $vNetName"
            echo "Address Prefixes: $addressPrefixes"

            # Validate addressPrefixes
            if [ -z "$addressPrefixes" ]; then
              echo "Error: addressPrefixes is empty or not found in the parameters file"
              exit 1
            fi

            # Deploy VNet
            az deployment group create \
              --resource-group "$resourceGroupName" \
              --template-file "$(Build.SourcesDirectory)/avm/res/network/virtual-network/main.bicep" \
              --parameters name="$vNetName" \
              --parameters location="$location" \
              --parameters addressPrefixes="['$addressPrefixes']" \
              --debug

            if [ $? -eq 0 ]; then
              echo "VNet deployment successful"
            else
              echo "VNet deployment failed"
              exit 1
            fi

            echo "VNet deployment script completed"

  - stage: ApprovalForStaticWebApp_${{ env }}
    condition: succeeded('Infrastructure_${{ env }}')
    jobs:
    - job: WaitForApproval
      pool: server
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 5440
        inputs:
          notifyUsers: |
            keith.lemon@zurichna.com
          instructions: 'Please validate the ${{ env }} infrastructure deployment and approve to proceed with Static Web App deployment.'
          onTimeout: 'reject'

  - stage: StaticWebApp_${{ env }}
    condition: succeeded('ApprovalForStaticWebApp_${{ env }}')
    jobs:
    - job: DeployStaticWebApp
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy Static Web App'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            set -e  # Exit immediately if a command exits with a non-zero status

            echo "Starting Virtual Network deployment script"

            # Extract parameters
            paramFile="$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json"
            echo "Parameter file path: $paramFile"

            if [ ! -f "$paramFile" ]; then
              echo "Error: Parameter file not found: $paramFile"
              exit 1
            fi

            echo "Parameter file contents:"
            cat "$paramFile"

            resourceGroupName=$(jq -r '.parameters.resourceGroupName.value' "$paramFile")
            location=$(jq -r '.parameters.location.value' "$paramFile")
            staticSiteName=$(jq -r '.parameters.staticSiteName.value' "$paramFile")

            az deployment group create \
              --resource-group "$resourceGroupName" \
              --template-file $(Build.SourcesDirectory)/avm/res/web/static-site/main.bicep \
              --parameters name="$staticSiteName" \
              --debug
