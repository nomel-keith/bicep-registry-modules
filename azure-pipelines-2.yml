trigger:
  - main

variables:
  environments: 'dev,qa,uat,prod'

pool:
  vmImage: 'ubuntu-latest'

stages:
- ${{ each env in split(variables.environments, ',') }}:
  - stage: WhatIf_${{ env }}
    condition: |
      and(
        succeeded(),
        or(
          eq('${{ env }}', 'dev'),
          and(eq('${{ env }}', 'qa'), succeeded('Infrastructure_dev')),
          and(eq('${{ env }}', 'uat'), succeeded('Infrastructure_qa')),
          and(eq('${{ env }}', 'prod'), succeeded('Infrastructure_uat'))
        )
      )
    jobs:
    - job: RunWhatIf
      steps:
      - task: AzureCLI@2
        displayName: 'Run What-If Analysis'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Run What-If for NSG
            echo "What-If Analysis for NSG:"
            echo "Current working directory: $(pwd)"

            # Extract resource group name from parameters file
            resourceGroupName=$(jq -r '.parameters.resourceGroupName.value' "$(Build.SourcesDirectory)/${{ env }}-parameters.json")
            echo "Resource Group Name: $resourceGroupName"

            az deployment group what-if \
              --resource-group "$resourceGroupName" \
              --template-file $(Build.SourcesDirectory)/avm/res/network/network-security-group/main.bicep \
              --parameters @$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json

            # Run What-If for VNet
            echo "What-If Analysis for VNet:"
            az deployment group what-if \
              --resource-group "$resourceGroupName" \
              --template-file $(Build.SourcesDirectory)/avm/res/network/virtual-network/main.bicep \
              --parameters @$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json

            # Run What-If for Static Web App
            echo "What-If Analysis for Static Web App:"
            az deployment group what-if \
              --resource-group "$resourceGroupName" \
              --template-file $(Build.SourcesDirectory)/avm/res/web/static-site/main.bicep \
              --parameters @$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json

  - stage: ApproveWhatIf_${{ env }}
    condition: succeeded('WhatIf_${{ env }}')
    jobs:
    - job: ApproveChanges
      pool: server
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440
        inputs:
          notifyUsers: |
            user@example.com
            example@example.com
          instructions: 'Please review the What-If analysis for ${{ env }} environment and approve to proceed with the deployment.'
          onTimeout: 'reject'

  - stage: Infrastructure_${{ env }}
    condition: succeeded('ApproveWhatIf_${{ env }}')
    jobs:
    - job: DeployInfrastructure
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        displayName: 'Create Resource Group'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az group create --name "$resourceGroupName" --location $(location)

      - task: AzureCLI@2
        displayName: 'Deploy Network Security Group'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment group create \
              --resource-group "$resourceGroupName" \
              --template-file $(Build.SourcesDirectory)/avm/res/network/network-security-group/main.bicep \
              --parameters @$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json

      - task: AzureCLI@2
        displayName: 'Deploy Virtual Network'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment group create \
              --resource-group $(resourceGroupName) \
              --template-file $(Build.SourcesDirectory)/avm/res/network/virtual-network/main.bicep \
              --parameters @$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json

      - task: AzureCLI@2
        displayName: 'Associate NSG with Subnets'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            nsgId=$(az network nsg show --resource-group $(resourceGroupName) --name $(nsgName) --query id -o tsv)

            az network vnet subnet update \
              --resource-group $(resourceGroupName) \
              --vnet-name $(vnetName) \
              --name dmz-subnet \
              --network-security-group $nsgId

            az network vnet subnet update \
              --resource-group $(resourceGroupName) \
              --vnet-name $(vnetName) \
              --name app-subnet \
              --network-security-group $nsgId

  - stage: ApprovalForStaticWebApp_${{ env }}
    condition: succeeded('Infrastructure_${{ env }}')
    jobs:
    - job: WaitForApproval
      pool: server
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440
        inputs:
          notifyUsers: |
            user@example.com
            example@example.com
          instructions: 'Please validate the ${{ env }} infrastructure deployment and approve to proceed with Static Web App deployment.'
          onTimeout: 'reject'

  - stage: StaticWebApp_${{ env }}
    condition: succeeded('ApprovalForStaticWebApp_${{ env }}')
    jobs:
    - job: DeployStaticWebApp
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy Static Web App'
        inputs:
          azureSubscription: 'terraform-demo'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment group create \
              --resource-group $(resourceGroupName) \
              --template-file $(Build.SourcesDirectory)/avm/res/web/static-site/main.bicep \
              --parameters @$(Build.SourcesDirectory)/parameters/${{ env }}-parameters.json
